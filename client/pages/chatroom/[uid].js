import Head from "next/head";
import "./chatroom.css";
import React, { useState } from "react";
import { Col, Row, Card, Navbar, Nav, Container } from "react-bootstrap";
import Link from "next/link";
import "bootstrap/dist/css/bootstrap.min.css";
import { withProtected } from "../../src/app/routes";
import { collection, query, where, getDoc, setDoc } from "firebase/firestore";
import { db } from "../../src/firebase";
import NavComp from "../../comps/NavComp.js";
import Message from "../../comps/Message.js";
import Conversation from "../../comps/Conversation.js";

function Chatroom({ auth }) {
  const [error, setError] = useState("");
  const { currentUser, logOut } = auth;
  const [userName, setUserName] = useState("");
  const [user, setUser] = useState(null);

  //search an user
  async function handleSearch() {
    const q = query(
      collection(db, "users"),
      where("diaplayName", "==", userName)
    );

    try {
      const querySnapshot = await getDocs(q);
      querySnapshot.forEach((doc) => {
        setUser(doc.data());
      });
    } catch (error) {
      setError(true);
    }
  }
  const handleKey = (e) => {
    e.code === "Enter" && handleSearch();
  };

  const handleSelect = async () => {
    //check whether the group(chats in firestore) exists, if not create
    const combinedId =
      currentUser.uid > user.uid
        ? currentUser.uid + user.uid
        : user.uid + currentUser.uid;

    try {
      const res = await getDoc(doc(db, "chats", combinedId));
      // no chat b/w two ppl
      if (!res.exists()) {
        //create a chat in chats collection
        await setDoc(doc(db, "chats", combinedId), { messages: [] });

        //create user chats
        await updateDoc(doc(db, "userChats", currentUser.uid), {
          [combinedId + ".userInfo"]: {
            uid: user.uid,
            displayName: user.displayName,
            photoURL: user.photoURL,
          },
          [combinedId + ".date"]: serverTimestamp(),
        });
        // for opponent user
        await updateDoc(doc(db, "userChats", user.uid), {
          [combinedId + ".userInfo"]: {
            uid: currentUser.uid,
            displayName: currentUser.displayName,
            photoURL: currentUser.photoURL,
          },
          [combinedId + ".date"]: serverTimestamp(),
        });
      }
    } catch (error) {}
    // unclick opponent user by clicking it
    setUser(null);
    //delete name in search bar
    setUserName("");
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavComp />

      <Container style={{ minHeight: "100vh" }}>
        <div className="chatDisplayName" style={{ padding: 10 }}>
          <h2>
            {" "}
            {currentUser && (
              <div className="username">
                {currentUser.displayName
                  ? currentUser.displayName
                  : currentUser.email}
                's chat
              </div>
            )}{" "}
          </h2>
        </div>
        <div className="chat">
          <div className="chatMenu">
            <div className="chatMenuWrap">
              <input placeholder="Search people" className="chatMenuInput" />
              <Conversation />
              <Conversation />
              <Conversation />
              <Conversation />
            </div>
          </div>
          <div className="chatBox">
            <div className="chatBoxWrap">
              <div className="chatBoxTop">
                <Message />
                <Message own={true} />
                <Message />
                <Message own={true} />
                <Message />
                <Message own={true} />
                <Message />
                <Message own={true} />
                <Message />
              </div>
              <div className="chatBoxBottem">
                <textarea
                  className="chatMessageInput"
                  placeholder="write here"
                ></textarea>
                <button className="chatSubmitButton">Send</button>
              </div>
            </div>
          </div>
        </div>
      </Container>
    </>
  );
}

export default withProtected(Chatroom);
