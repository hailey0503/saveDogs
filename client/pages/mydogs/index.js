import Head from 'next/head'
import { useEffect, useState } from 'react';
import { Col, Row, Card, Alert, Navbar, Nav, ListGroup, Container, Offcanvas, Button } from 'react-bootstrap';
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import 'bootstrap/dist/css/bootstrap.min.css';
import { withProtected } from '../../src/app/routes';


function mydogs( { auth } ) {
	const [ error, setError ] = useState('')
	const router = useRouter()
	const [ dogs, setDogs ] = useState("")
	const { currentUser, logOut } = auth;
	const [isLoading, setLoading] = useState(false); 
	const handleClick = () => setLoading(true);


	const loadMyDogs = async () => {
		const token = await currentUser.getIdToken();
		  console.log(token)

		const res = await fetch('http://localhost:4800/users', {
  				headers: {authorization: `Bearer ${token}`}
		})
	  
		setDogs(await res.json())
	  
	}

	useEffect(() => {
		if (currentUser) {
			loadMyDogs();
		}
	}, [currentUser]);
	

	const saveChanges = async () => {
		const token = await currentUser.getIdToken();
		const res = await axios.put(
			'/users/${currentUser.uid}', 
			{ updates: {name} },
			{ header: {authtoken: token }}
		);	
	};
  
	async function handleLogOut() {
	
	  try {
  
		setError("")
		await logOut();
	  } catch {
  
		setError("Failed to Log Out")
  
	  }
	}
/*
	function LoadingButton() {
	  
		useEffect(() => {
		  function simulateNetworkRequest() {
			return new Promise((resolve) => setTimeout(resolve, 2000));
		  }
	  
		  if (isLoading) {
			simulateNetworkRequest().then(() => {
			  setLoading(false);
			});
		  }
		}, [isLoading]);
	  
	
	} 
*/ 
	return (
	  <>
		<Head>
		  <title>Create Next App</title>
		  <meta name="description" content="Generated by create next app" />
		  <meta name="viewport" content="width=device-width, initial-scale=1" />
		  <link rel="icon" href="/favicon.ico" />
		</Head>
		{[false].map((expand) => (
		  <Navbar key={expand} bg="dark" variant="dark" expand={expand} className="mb-3">
			<Container fluid>
			<Navbar.Brand href="/">Dog Transportation</Navbar.Brand>
			  <Navbar.Toggle aria-controls={`offcanvasNavbar-expand-${expand}`} />
			  <Navbar.Offcanvas
				id={`offcanvasNavbar-expand-${expand}`}
				aria-labelledby={`offcanvasNavbarLabel-expand-${expand}`}
				placement="end"
			  >
				<Offcanvas.Header closeButton>
				  <Offcanvas.Title id={`offcanvasNavbarLabel-expand-${expand}`}>
				  { currentUser && <div>{currentUser?.email}</div> }
				  </Offcanvas.Title>
				</Offcanvas.Header>
				<Offcanvas.Body>
				  <Nav className="justify-content-end flex-grow-1 pe-3">
					<Nav.Link href="/">View my profile</Nav.Link>
					<Nav.Link href="/admin">Upload dogs</Nav.Link>
					<Nav.Link href="/admin">Manage my dogs</Nav.Link>
					<Nav.Link href="../message">My Message</Nav.Link>
					<Nav.Item> 
					  <Nav.Link onClick = { handleLogOut }>Log Out</Nav.Link>
					</Nav.Item>
				  </Nav>
				</Offcanvas.Body>
			  </Navbar.Offcanvas>
			</Container>
		  </Navbar>
		))}
		 <h2> { currentUser && <div>{currentUser.displayName? currentUser.displayName: currentUser.email}'s dogs</div> } </h2>
		 <Container className = "d-flex align-items-center justify-content-center" style = {{ minHeight: "100vh" }}>
              <Row xs={2} md={2} className="g-4">
                {dogs.result && dogs.result.map(dog => 
                  <div key={dog._id}>
                    <Col>
                      <Card style={{ width: '30rem', height: '30rem' }}>
                    
                        <Card.Img variant="top" style={{ width: '30rem', height: '20rem'  }} src={" http://localhost:4800/" + dog.image } />
                        <Card.Body>
                          <Card.Title>
                            { dog.name }
                          </Card.Title>
                          <Card.Text> 
                            { dog.name } wants to go to { dog.airport }
                          </Card.Text>
						 
                          <Button variant="primary">update</Button>
						  <Button variant="primary">delete</Button>
						
                        </Card.Body>
                      </Card>
                    </Col>
                  </div>
                )}
              </Row>
            </Container>
	  </>
	 
	)
  }
  
  export default withProtected(mydogs)
  