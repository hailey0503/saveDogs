import Head from 'next/head'
import React from "react";
import { useEffect, useState, useRef } from 'react';
import { Col, Row, Card, Alert, Navbar, Nav, Form, Container, Offcanvas, Button } from 'react-bootstrap';
import Link from 'next/link'
import { useRouter } from 'next/router';
import 'bootstrap/dist/css/bootstrap.min.css';
import { withProtected } from '../../src/app/routes';
import Overlay from 'react-bootstrap/Overlay';
import Popover from 'react-bootstrap/Popover';
import Swal from 'sweetalert2';
import 'animate.css';





function mydogs( { auth } ) {
	const [ error, setError ] = useState('')
	const router = useRouter()
	const [ dogs, setDogs ] = useState("")
	const [show, setShow] = useState(false);
 	const [target, setTarget] = useState(null);
  	const ref = useRef(null);
	const { currentUser, logOut } = auth;
	//const handleClick = () => setLoading(true);

	const loadMyDogs = async () => {
		const token = await currentUser.getIdToken();
		console.log(token)
		const cur_uid = currentUser.uid


		const res = await fetch('http://localhost:4800/users', {
  				headers: {authorization: `Bearer ${token}`}
		})
		const response = await res.json()
		console.log(response.result)
		const dogs = response.result.filter(item => item.uid === cur_uid )
		console.log(dogs)
		setDogs(dogs)
	  
	}

	useEffect(() => {
		if (currentUser) {
			loadMyDogs();
		}
	}, [currentUser]);
	
	const updateClick = async (event) => {
		setShow(!show);
    	setTarget(event.target);
	};
	const deletealert = async (event, dog) => {
		Swal.fire({
			title: 'Are you sure?',
			text: "You won't be able to revert this!",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#3085d6',
			cancelButtonColor: '#d33',
			confirmButtonText: 'Yes, delete it!'
		  }).then((result) => {
			if (result.isConfirmed) {
				deleteClick(event, dog)
			 	Swal.fire(
					'Deleted!',
					'Your file has been deleted.',
					'success'
			  	)
			}
		  })
	}
	const deleteClick = async (event, dog) => {
		
		const token = await currentUser.getIdToken();
		const dog_id = dog._id
		const endpoint = "http://localhost:4800/users/delete/" + dog_id
		// Form the request for sending data to the server.
		const options = {
		  // The method is POST because we are sending data.
		  method: 'DELETE',
		  // Tell the server we're sending JSON.
		  headers: {authorization: `Bearer ${token}`}, 
		}
		
		// Send the form data to our forms API on Vercel and get a response.
		const response = await fetch(endpoint, options)
	
		// Get the response data from server as JSON.
		// If server returns the name submitted, that means the form works.
		const result = await response.json()
		
		router.reload()

	}

	const handleSubmit = async (event, dog) => {
		// Stop the form from submitting and refreshing the page.
		event.preventDefault()
		const dog_id = dog._id
		console.log(dog_id)
		console.log(dog.image)
		console.log(currentUser.uid)
		console.log(event.target.name.value)

		const data = new FormData()
		data.append('name', event.target.name.value)
		data.append('contact', event.target.contact.value)
		data.append('email', event.target.email.value)
		data.append('kakao', event.target.kakao.value)
		data.append('airport', event.target.airport.value)
		data.append('message', event.target.message.value)
		data.append('testImage', event.target.image.files[0])
		
		const token = await currentUser.getIdToken();
		console.log(token)
		console.log(data)
		//console.log(data.testImage)
		//console.log(event.target.image)
	
		// API endpoint where we send form data.
		//const endpoint = process.env.API_ENDPOINT
		const endpoint = "http://localhost:4800/users/" + dog_id
		// Form the request for sending data to the server.
		const options = {
		  // The method is POST because we are sending data.
		  method: 'PUT',
		  // Tell the server we're sending JSON.
		  headers: {authorization: `Bearer ${token}`},
		  // Body of the request is the JSON data we created above.
		  body: data,
		}
	
		// Send the form data to our forms API on Vercel and get a response.
		const response = await fetch(endpoint, options)
	
		// Get the response data from server as JSON.
		// If server returns the name submitted, that means the form works.
		const result = await response.json()
		//alert(`Is this your full name: ${result.body}`)
		alert(`successfully updated`)
		router.reload()
	
	  }
	
	
	const saveChanges = async () => {
		const token = await currentUser.getIdToken();
		const res = await axios.put(
			'/users/${currentUser.uid}', 
			{ updates: {name} },
			{ header: {authtoken: token }}
		);	
	};
  
	async function handleLogOut() {
	
	  try {
  
		setError("")
		await logOut();
	  } catch {
  
		setError("Failed to Log Out")
  
	  }
	}

	return (
	  <>
		<Head>
		  <title>Create Next App</title>
		  <meta name="description" content="Generated by create next app" />
		  <meta name="viewport" content="width=device-width, initial-scale=1" />
		  <link rel="icon" href="/favicon.ico" />
		</Head>
		{[false].map((expand) => (
		  <Navbar key={expand} bg="dark" variant="dark" expand={expand} className="mb-3">
			<Container fluid>
			<Navbar.Brand href="/">Dog Transportation</Navbar.Brand>
			  <Navbar.Toggle aria-controls={`offcanvasNavbar-expand-${expand}`} />
			  <Navbar.Offcanvas
				id={`offcanvasNavbar-expand-${expand}`}
				aria-labelledby={`offcanvasNavbarLabel-expand-${expand}`}
				placement="end"
			  >
				<Offcanvas.Header closeButton>
				  <Offcanvas.Title id={`offcanvasNavbarLabel-expand-${expand}`}>
				  { currentUser && <div>Hello {currentUser.displayName? currentUser.displayName: currentUser.email}</div> }
				  </Offcanvas.Title>
				</Offcanvas.Header>
				<Offcanvas.Body>
				  <Nav className="justify-content-end flex-grow-1 pe-3">
					<Nav.Link href="/mypage">View my profile</Nav.Link>
					<Nav.Link href="/admin">Upload dogs</Nav.Link>
					<Nav.Link href="/admin">Manage my dogs</Nav.Link>
					<Nav.Link href="../message">My Message</Nav.Link>
					<Nav.Item> 
					  <Nav.Link onClick = { handleLogOut }>Log Out</Nav.Link>
					</Nav.Item>
				  </Nav>
				</Offcanvas.Body>
			  </Navbar.Offcanvas>
			</Container>
		  </Navbar>
		))}
		 <h2> { currentUser && <div>{currentUser.displayName? currentUser.displayName: currentUser.email}'s dogs</div> } </h2>
		 <Container className = "d-flex align-items-center justify-content-center" style = {{ minHeight: "100vh" }}>
              <Row xs={2} md={2} className="g-4">
                {dogs && dogs.map(dog => 
                  <div key={dog._id}>
                    <Col>
                      <Card style={{ width: '30rem', height: '30rem' }}>
                    
                        <Card.Img variant="top" style={{ width: '30rem', height: '20rem'  }} src={" http://localhost:4800/" + dog.image } />
                        <Card.Body>
                        	<Card.Title>
                            	{ dog.name }
                          	</Card.Title>
                          	<Card.Text> 
                            	{ dog.name } wants to go to { dog.airport }
                          	</Card.Text>
						 
                          	<div ref ={ref}>
								<Button onClick={ updateClick }>edit</Button>

								<Overlay
									show={show}
									target={target}
									placement="right"
									container={ref}
									containerPadding={20}
								>
									<Popover id="update-popover-contained">
									<Popover.Body>
									<Form onSubmit={e => handleSubmit(e, dog)} >
										<Row>
										<Col>
											<Form.Label>dog name</Form.Label>
											<Form.Control type="text" id = "name" placeholder={dog.name}  />
										</Col>
										<Col>
											<Form.Label>photo here</Form.Label>
											<Form.Control type="file" id = 'image' multiple />	
										</Col>
										</Row>	
										<Row>
										<Col>
											<Form.Label>contact</Form.Label>
											<Form.Control type="phonenumber" id = "contact" placeholder={dog.contact} />	
										</Col>
										<Col>
											<Form.Label>email address</Form.Label>
											<Form.Control type="email" id = "email" placeholder={dog.email} />
											
										</Col>
										</Row>
										<Row>
										<Col>
											<Form.Label>kakao</Form.Label>
											<Form.Control type="kakaoID" id = "kakao" placeholder={dog.kakao} />	
										</Col>
										<Col>
											<Form.Label>destination</Form.Label>
												<Form.Select aria-label="Default select example" id = "airport">
												<option>Select Airport</option>
												<option value="1">San Francisco</option>
												<option value="2">New York</option>
												<option value="3">Los Angeles</option>
												<option value="4">Toronto</option>
												<option value="5">Vancouver</option>
												<option value="6">Seattle</option>
												</Form.Select>
										</Col>
										</Row>	
										<Form.Label>Message</Form.Label>
										<Form.Control as="textarea" id = "message" rows={3} />
										<br/>
										<Button variant="primary" type="submit">
											update
										</Button>
										</Form>
										</Popover.Body>
									</Popover>
								</Overlay>
							</div>
							<Button onClick = {e => deletealert(e, dog)} variant="primary" type="submit">
											delete
										</Button>
                        </Card.Body>
                      </Card>
                    </Col>
                  </div>
                )}
              </Row>
            </Container>
			<h2>my favorites</h2>
			<Container>
				<h3>go find dogs</h3>
			</Container>
	  </>
	 
	)
  }
  
  export default withProtected(mydogs)
  