import Head from 'next/head'
import React, { useRef, useState } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import { Form, Button, Card, Alert, Navbar, Container } from 'react-bootstrap'
import Link from 'next/link'
import { updateProfile } from "firebase/auth";
import { withPublic } from '../../src/app/routes';
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { collection, doc, addDoc, setDoc } from "firebase/firestore";
import { db } from "../../src/firebase"
import validator from 'validator'


function Register( { auth }) {
	const usernameRef = useRef()
	const emailRef = useRef()
	const passwordlRef = useRef()
	const passwordConfirmRef = useRef()
	const { signUp, currentUser} = auth
	const [ error, setError ] = useState('')
	const [ loading, setLoading ] = useState(false)
	const [ emailError, setEmailError ] = useState('')
	

	const handleSubmit = async (e) => {
		e.preventDefault()
		let uid = ''
		if (passwordlRef.current.value != passwordConfirmRef.current.value) {
			return setError('PASSWORD DO NOT MATCH')
		}
		const displayName = usernameRef.current.value;
    	const email = emailRef.current.value;
    	const password = passwordlRef.current.value;
    	//const file = e.target[3].files[0];
		if (validator.isEmail(email)) {
			setEmailError('Valid Email')
		  } else {
			setEmailError('Enter valid Email!')
			alert(emailError)
		  }
		

		try {
			setError('')
			setLoading(true) 
			const userCredential = await signUp(email, password)

			//Create a unique image name
			//const date = new Date().getTime();
			//const storageRef = ref(storage, `${displayName + date}`);

			// check if user created
			const user = userCredential.user
			console.log(userCredential.user) //???? why undefined?
			uid = userCredential.user.uid

			await updateProfile(userCredential.user, {
				displayName: displayName, 
			}).then(() => {
				console.log('User Profile Updated Successfully');
				console.log(userCredential.user)
				
			})

			await setDoc(doc(db, "users", user.uid), {
				uid: user.uid,
				displayName,
				email
			  });
			
			await setDoc(doc(db, "userChats", user.uid), {});

	
			const data = {
				uid: uid,
				favorite: []
			}
		
			  //const token = await currentUser.getIdToken();
			const endpoint = "http://localhost:4800/userprofile"
			// Form the request for sending data to the server.
			const options = {
				// The method is POST because we are sending data.
				method: 'POST',
				// Tell the server we're sending JSON.
				//headers: {authorization: `Bearer ${token}`},
				// Body of the request is the JSON data we created above.
				headers: {
				  'Content-Type': 'application/json',
				  },
				  body: JSON.stringify(data),
				
			}
			console.log(endpoint, options)  
			
			await postProfile(endpoint, options)
			//await updateProfile(user, displayName)
			console.log('bw')
			
		} catch (error) {
			console.log(error)
			if (error.code === 'auth/email-already-in-use') {
				setError("email is already in use try another email")
				setLoading(false)

			} else if (error.code === 'auth/email-already-in-use') {
				setError("passward must be at least 6 characters")
				setLoading(false)

			} else if (error.code === 'auth/invalid-email') {
				setError("Thrown if the email address is not valid")
				setLoading(false)

			} else {
				setError(error.code) 
			}
			
		}		 
	}

	async function postProfile(endpoint, options) {
		// Send the form data to our forms API on Vercel and get a response.
		const response = await fetch(endpoint, options)
  
		// Get the response data from server as JSON.
		// If server returns the name submitted, that means the form works.
		const result = await response.json()
		console.log(result)
		alert(`successfully added to userprofile`)
		setLoading(false)
	}

  return (
	<>
		<Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav>
          <Navbar bg="dark" variant="dark">
          	<Container>
          		<Navbar.Brand href="/">Dog Transportation</Navbar.Brand>
        	</Container>   
          </Navbar>
        </nav>
	<Container className = "d-flex align-items-center justify-content-center"
			style = {{ minHeight: "100vh" }}>
		<div className = "w-100" style = {{ maxWidth: '400px'}}>
			<Card>
				<Card.Body>
					<h2 className = "text-center mb-4">Sign Up</h2> 
					{ error && <Alert variant = "danger"> { error } </Alert> }
					<Form onSubmit={handleSubmit}>
						<Form.Group id = "username">
							<Form.Label> Username </Form.Label>
							<Form.Control type = "username" ref = {usernameRef} required />
						</Form.Group>
						<br />
						<Form.Group id = "email">
							<Form.Label> Email </Form.Label>
							<Form.Control type = "email" ref = {emailRef} required />
						</Form.Group>
						<br />
						<Form.Group id = "password">
							<Form.Label> Password </Form.Label>
							<Form.Control type = "password" ref = {passwordlRef} required />
						</Form.Group>
						<br />
						<Form.Group id = "passwordConfirm">
							<Form.Label> Confirm Password </Form.Label>
							<Form.Control type = "password" ref = {passwordConfirmRef} required />
						</Form.Group>
						<br/ >
						<Button disabled = { loading }  className = "w-100" type = "submit">Sign Up</Button>
					</Form>
					<div className = "w-100 text-center mt-2">
						Already have an account? <Link href="../login/">Log In</Link>
					</div>
				</Card.Body>
			</Card>
		</div>
	</Container>
	</>
  )
}
export default withPublic(Register)